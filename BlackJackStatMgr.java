/* This file is generated by genstat. */
/* No manual modification is permitted. */

package com.netease.game.stat;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

  
// blackjackserver统计结构
public class BlackJackStatMgr
{
	private static BlackJackStatMgr instance;
	
    
    // 桌子数目
    private int TotalTableNum;
    
    // 玩家庄家的桌子数目
    private int MasterTableNum;
    
    // 系统庄家的桌子数目
    private int SystemTableNum;
    
    // 活跃桌子数目
    private int ActiveTableNum;
    
    // 隐藏的桌子数目
    private int HideTableNum;
    
    // 桌子上的玩家数目
    private int TotalPlayerNum;
    
    // 桌子上的观战玩家数目
    private int TotalWatchingPlayerNum;
    
    // 请求分桌数目
    private int JoinNum;
    
    // 快速请求分桌数目
    private int JoinQuickNum;
    
    // 手动请求分桌数目
    private int JoinClickNum;
    
    // 分桌失败数目
    private int JoinFailNum;
    
    // 分桌多次失败的数目
    private int JoinMaxFailNum;
    
    // 分桌无playerinfo失败的数目
    private int JoinNoInfoFailNum;
    
    // 分桌不同设备失败的数目
    private int JoinDiffFailNum;
    
    // 分桌无routine失败的数目
    private int JoinNoRoutineFailNum;
    
    // 分桌失败的数目
    private int JoinChooseTableFailNum;
    
    // 分座位失败的数目
    private int JoinChooseSeatFailNum;
    
    // 分桌关服失败的数目
    private int JoinOffFailNum;
    
    // 分桌校验失败的数目
    private int JoinTokenFailNum;
    
    // 分桌金币失败的数目
    private int JoinCoinsFailNum;
    
    // 分桌锁定失败的数目
    private int JoinLockFailNum;
    
    // 分桌封禁失败的数目
    private int JoinForbiddenFailNum;
    
    // 分桌关服失败的数目
    private int JoinCloseFailNum;
    
    // 分桌vip失败的数目
    private int JoinVIPFailNum;
    
    // 创建的桌子
    private int NewTableNum;
    
    // 开局的桌子
    private int InitTableNum;
    
    // 结算的桌子
    private int EndTableNum;
    
    // 销毁的桌子
    private int DestroyTableNum;
    
    // 收包数目
    private int RecvPacketNum;
    
    // 发包数目
    private int SendPacketNum;
    
    // 收包流量
    private int RecvSizeNum;
    
    // 发包流量
    private int SendSizeNum;
    
    // Top收包处理时间
    private int ProcessTime;
    
    
    // 各个房间的桌子数目
    private int[] RoomTableNum = new int[3];
    
    // 各个房间的玩家数目
    private int[] RoomPlayerNum = new int[3];
    
    // 桌子人数的玩家分布
    private int[] TablePlayerNum = new int[6];
    
    // 各个房间的观战玩家数目
    private int[] RoomWatchingPlayerNum = new int[3];
    
    // 桌子各状态数目
    private int[] TableStateNum = new int[11];
    
    
    // Top收包数目
    private int[] TopRecvPacketNum = new int[200];
    
    // Top发包数目
    private int[] TopSendPacketNum = new int[200];
    
    // Top收包流量
    private int[] TopRecvSizeNum = new int[200];
    
    // Top发包流量
    private int[] TopSendSizeNum = new int[200];
    
    // Top收包处理时间
    private int[] TopProcessTime = new int[200];
        
        
	
	// blackjackserver统计结构
    public BlackJackStatMgr()
	{
		clear();
	}
	
	public static BlackJackStatMgr instance()
	{
		if (instance == null)
		{
			synchronized (BlackJackStatMgr.class)
			{
				if (instance == null)
				{
					instance = new BlackJackStatMgr();
					return instance;
				}
			}
		}
		return instance;
	}
	
	public void sortArray(int[] src, int[] desId, int[] desVal, boolean isMax)
	{
		int srcSize = src.length;
		int desSize = desId.length;
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				int max = 0;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] > max)
					{
						desId[i] = j;
						desVal[i] = src[j];
						max = src[j];
					}
				}
				src[desId[i]] = 0;
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				int min = 0xFFFFFFFF;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] < min && src[j] > 0)
					{
						desId[i] = j;
						desVal[i] = src[j];
						min = src[j];
					}
				}
				src[desId[i]] = 0xFFFFFFFF;
			}
		}
	}

	public void sortHashMap(ConcurrentHashMap<Integer, Integer> map, int[] desId, int[] desVal, boolean isMax)
	{
		int desSize = desId.length;
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				int max = 0;
				for (Map.Entry<Integer, Integer> e : map.entrySet())
				{
					if (e.getValue() > max)
					{
						desId[i] = e.getKey();
						desVal[i] = e.getValue();
						max = e.getValue();
					}
				}
				if (map.containsKey(desId[i]))
				{
					map.put(desId[i], 0);
				}
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				int min = 0xFFFFFFFF;
				for (Map.Entry<Integer, Integer> e : map.entrySet())
				{
					if (e.getValue() < min && e.getValue() > 0)
					{
						desId[i] = e.getKey();
						desVal[i] = e.getValue();
						min = e.getValue();
					}
				}
				if (map.containsKey(desId[i]))
				{
					map.put(desId[i], 0);
				}
			}
		}
	}
		
    
    // get 桌子数目
    public int getTotalTableNum()
    {
        return TotalTableNum;
    }
    
    // set 桌子数目
    public void setTotalTableNum(int _TotalTableNum)
    {
        TotalTableNum = _TotalTableNum;
    }
    
    // add 桌子数目
    public void addTotalTableNum(int _TotalTableNum)
    {
        TotalTableNum += _TotalTableNum;
    }
    
    // get 玩家庄家的桌子数目
    public int getMasterTableNum()
    {
        return MasterTableNum;
    }
    
    // set 玩家庄家的桌子数目
    public void setMasterTableNum(int _MasterTableNum)
    {
        MasterTableNum = _MasterTableNum;
    }
    
    // add 玩家庄家的桌子数目
    public void addMasterTableNum(int _MasterTableNum)
    {
        MasterTableNum += _MasterTableNum;
    }
    
    // get 系统庄家的桌子数目
    public int getSystemTableNum()
    {
        return SystemTableNum;
    }
    
    // set 系统庄家的桌子数目
    public void setSystemTableNum(int _SystemTableNum)
    {
        SystemTableNum = _SystemTableNum;
    }
    
    // add 系统庄家的桌子数目
    public void addSystemTableNum(int _SystemTableNum)
    {
        SystemTableNum += _SystemTableNum;
    }
    
    // get 活跃桌子数目
    public int getActiveTableNum()
    {
        return ActiveTableNum;
    }
    
    // set 活跃桌子数目
    public void setActiveTableNum(int _ActiveTableNum)
    {
        ActiveTableNum = _ActiveTableNum;
    }
    
    // add 活跃桌子数目
    public void addActiveTableNum(int _ActiveTableNum)
    {
        ActiveTableNum += _ActiveTableNum;
    }
    
    // get 隐藏的桌子数目
    public int getHideTableNum()
    {
        return HideTableNum;
    }
    
    // set 隐藏的桌子数目
    public void setHideTableNum(int _HideTableNum)
    {
        HideTableNum = _HideTableNum;
    }
    
    // add 隐藏的桌子数目
    public void addHideTableNum(int _HideTableNum)
    {
        HideTableNum += _HideTableNum;
    }
    
    // get 桌子上的玩家数目
    public int getTotalPlayerNum()
    {
        return TotalPlayerNum;
    }
    
    // set 桌子上的玩家数目
    public void setTotalPlayerNum(int _TotalPlayerNum)
    {
        TotalPlayerNum = _TotalPlayerNum;
    }
    
    // add 桌子上的玩家数目
    public void addTotalPlayerNum(int _TotalPlayerNum)
    {
        TotalPlayerNum += _TotalPlayerNum;
    }
    
    // get 桌子上的观战玩家数目
    public int getTotalWatchingPlayerNum()
    {
        return TotalWatchingPlayerNum;
    }
    
    // set 桌子上的观战玩家数目
    public void setTotalWatchingPlayerNum(int _TotalWatchingPlayerNum)
    {
        TotalWatchingPlayerNum = _TotalWatchingPlayerNum;
    }
    
    // add 桌子上的观战玩家数目
    public void addTotalWatchingPlayerNum(int _TotalWatchingPlayerNum)
    {
        TotalWatchingPlayerNum += _TotalWatchingPlayerNum;
    }
    
    // get 请求分桌数目
    public int getJoinNum()
    {
        return JoinNum;
    }
    
    // set 请求分桌数目
    public void setJoinNum(int _JoinNum)
    {
        JoinNum = _JoinNum;
    }
    
    // add 请求分桌数目
    public void addJoinNum(int _JoinNum)
    {
        JoinNum += _JoinNum;
    }
    
    // get 快速请求分桌数目
    public int getJoinQuickNum()
    {
        return JoinQuickNum;
    }
    
    // set 快速请求分桌数目
    public void setJoinQuickNum(int _JoinQuickNum)
    {
        JoinQuickNum = _JoinQuickNum;
    }
    
    // add 快速请求分桌数目
    public void addJoinQuickNum(int _JoinQuickNum)
    {
        JoinQuickNum += _JoinQuickNum;
    }
    
    // get 手动请求分桌数目
    public int getJoinClickNum()
    {
        return JoinClickNum;
    }
    
    // set 手动请求分桌数目
    public void setJoinClickNum(int _JoinClickNum)
    {
        JoinClickNum = _JoinClickNum;
    }
    
    // add 手动请求分桌数目
    public void addJoinClickNum(int _JoinClickNum)
    {
        JoinClickNum += _JoinClickNum;
    }
    
    // get 分桌失败数目
    public int getJoinFailNum()
    {
        return JoinFailNum;
    }
    
    // set 分桌失败数目
    public void setJoinFailNum(int _JoinFailNum)
    {
        JoinFailNum = _JoinFailNum;
    }
    
    // add 分桌失败数目
    public void addJoinFailNum(int _JoinFailNum)
    {
        JoinFailNum += _JoinFailNum;
    }
    
    // get 分桌多次失败的数目
    public int getJoinMaxFailNum()
    {
        return JoinMaxFailNum;
    }
    
    // set 分桌多次失败的数目
    public void setJoinMaxFailNum(int _JoinMaxFailNum)
    {
        JoinMaxFailNum = _JoinMaxFailNum;
    }
    
    // add 分桌多次失败的数目
    public void addJoinMaxFailNum(int _JoinMaxFailNum)
    {
        JoinMaxFailNum += _JoinMaxFailNum;
    }
    
    // get 分桌无playerinfo失败的数目
    public int getJoinNoInfoFailNum()
    {
        return JoinNoInfoFailNum;
    }
    
    // set 分桌无playerinfo失败的数目
    public void setJoinNoInfoFailNum(int _JoinNoInfoFailNum)
    {
        JoinNoInfoFailNum = _JoinNoInfoFailNum;
    }
    
    // add 分桌无playerinfo失败的数目
    public void addJoinNoInfoFailNum(int _JoinNoInfoFailNum)
    {
        JoinNoInfoFailNum += _JoinNoInfoFailNum;
    }
    
    // get 分桌不同设备失败的数目
    public int getJoinDiffFailNum()
    {
        return JoinDiffFailNum;
    }
    
    // set 分桌不同设备失败的数目
    public void setJoinDiffFailNum(int _JoinDiffFailNum)
    {
        JoinDiffFailNum = _JoinDiffFailNum;
    }
    
    // add 分桌不同设备失败的数目
    public void addJoinDiffFailNum(int _JoinDiffFailNum)
    {
        JoinDiffFailNum += _JoinDiffFailNum;
    }
    
    // get 分桌无routine失败的数目
    public int getJoinNoRoutineFailNum()
    {
        return JoinNoRoutineFailNum;
    }
    
    // set 分桌无routine失败的数目
    public void setJoinNoRoutineFailNum(int _JoinNoRoutineFailNum)
    {
        JoinNoRoutineFailNum = _JoinNoRoutineFailNum;
    }
    
    // add 分桌无routine失败的数目
    public void addJoinNoRoutineFailNum(int _JoinNoRoutineFailNum)
    {
        JoinNoRoutineFailNum += _JoinNoRoutineFailNum;
    }
    
    // get 分桌失败的数目
    public int getJoinChooseTableFailNum()
    {
        return JoinChooseTableFailNum;
    }
    
    // set 分桌失败的数目
    public void setJoinChooseTableFailNum(int _JoinChooseTableFailNum)
    {
        JoinChooseTableFailNum = _JoinChooseTableFailNum;
    }
    
    // add 分桌失败的数目
    public void addJoinChooseTableFailNum(int _JoinChooseTableFailNum)
    {
        JoinChooseTableFailNum += _JoinChooseTableFailNum;
    }
    
    // get 分座位失败的数目
    public int getJoinChooseSeatFailNum()
    {
        return JoinChooseSeatFailNum;
    }
    
    // set 分座位失败的数目
    public void setJoinChooseSeatFailNum(int _JoinChooseSeatFailNum)
    {
        JoinChooseSeatFailNum = _JoinChooseSeatFailNum;
    }
    
    // add 分座位失败的数目
    public void addJoinChooseSeatFailNum(int _JoinChooseSeatFailNum)
    {
        JoinChooseSeatFailNum += _JoinChooseSeatFailNum;
    }
    
    // get 分桌关服失败的数目
    public int getJoinOffFailNum()
    {
        return JoinOffFailNum;
    }
    
    // set 分桌关服失败的数目
    public void setJoinOffFailNum(int _JoinOffFailNum)
    {
        JoinOffFailNum = _JoinOffFailNum;
    }
    
    // add 分桌关服失败的数目
    public void addJoinOffFailNum(int _JoinOffFailNum)
    {
        JoinOffFailNum += _JoinOffFailNum;
    }
    
    // get 分桌校验失败的数目
    public int getJoinTokenFailNum()
    {
        return JoinTokenFailNum;
    }
    
    // set 分桌校验失败的数目
    public void setJoinTokenFailNum(int _JoinTokenFailNum)
    {
        JoinTokenFailNum = _JoinTokenFailNum;
    }
    
    // add 分桌校验失败的数目
    public void addJoinTokenFailNum(int _JoinTokenFailNum)
    {
        JoinTokenFailNum += _JoinTokenFailNum;
    }
    
    // get 分桌金币失败的数目
    public int getJoinCoinsFailNum()
    {
        return JoinCoinsFailNum;
    }
    
    // set 分桌金币失败的数目
    public void setJoinCoinsFailNum(int _JoinCoinsFailNum)
    {
        JoinCoinsFailNum = _JoinCoinsFailNum;
    }
    
    // add 分桌金币失败的数目
    public void addJoinCoinsFailNum(int _JoinCoinsFailNum)
    {
        JoinCoinsFailNum += _JoinCoinsFailNum;
    }
    
    // get 分桌锁定失败的数目
    public int getJoinLockFailNum()
    {
        return JoinLockFailNum;
    }
    
    // set 分桌锁定失败的数目
    public void setJoinLockFailNum(int _JoinLockFailNum)
    {
        JoinLockFailNum = _JoinLockFailNum;
    }
    
    // add 分桌锁定失败的数目
    public void addJoinLockFailNum(int _JoinLockFailNum)
    {
        JoinLockFailNum += _JoinLockFailNum;
    }
    
    // get 分桌封禁失败的数目
    public int getJoinForbiddenFailNum()
    {
        return JoinForbiddenFailNum;
    }
    
    // set 分桌封禁失败的数目
    public void setJoinForbiddenFailNum(int _JoinForbiddenFailNum)
    {
        JoinForbiddenFailNum = _JoinForbiddenFailNum;
    }
    
    // add 分桌封禁失败的数目
    public void addJoinForbiddenFailNum(int _JoinForbiddenFailNum)
    {
        JoinForbiddenFailNum += _JoinForbiddenFailNum;
    }
    
    // get 分桌关服失败的数目
    public int getJoinCloseFailNum()
    {
        return JoinCloseFailNum;
    }
    
    // set 分桌关服失败的数目
    public void setJoinCloseFailNum(int _JoinCloseFailNum)
    {
        JoinCloseFailNum = _JoinCloseFailNum;
    }
    
    // add 分桌关服失败的数目
    public void addJoinCloseFailNum(int _JoinCloseFailNum)
    {
        JoinCloseFailNum += _JoinCloseFailNum;
    }
    
    // get 分桌vip失败的数目
    public int getJoinVIPFailNum()
    {
        return JoinVIPFailNum;
    }
    
    // set 分桌vip失败的数目
    public void setJoinVIPFailNum(int _JoinVIPFailNum)
    {
        JoinVIPFailNum = _JoinVIPFailNum;
    }
    
    // add 分桌vip失败的数目
    public void addJoinVIPFailNum(int _JoinVIPFailNum)
    {
        JoinVIPFailNum += _JoinVIPFailNum;
    }
    
    // get 创建的桌子
    public int getNewTableNum()
    {
        return NewTableNum;
    }
    
    // set 创建的桌子
    public void setNewTableNum(int _NewTableNum)
    {
        NewTableNum = _NewTableNum;
    }
    
    // add 创建的桌子
    public void addNewTableNum(int _NewTableNum)
    {
        NewTableNum += _NewTableNum;
    }
    
    // get 开局的桌子
    public int getInitTableNum()
    {
        return InitTableNum;
    }
    
    // set 开局的桌子
    public void setInitTableNum(int _InitTableNum)
    {
        InitTableNum = _InitTableNum;
    }
    
    // add 开局的桌子
    public void addInitTableNum(int _InitTableNum)
    {
        InitTableNum += _InitTableNum;
    }
    
    // get 结算的桌子
    public int getEndTableNum()
    {
        return EndTableNum;
    }
    
    // set 结算的桌子
    public void setEndTableNum(int _EndTableNum)
    {
        EndTableNum = _EndTableNum;
    }
    
    // add 结算的桌子
    public void addEndTableNum(int _EndTableNum)
    {
        EndTableNum += _EndTableNum;
    }
    
    // get 销毁的桌子
    public int getDestroyTableNum()
    {
        return DestroyTableNum;
    }
    
    // set 销毁的桌子
    public void setDestroyTableNum(int _DestroyTableNum)
    {
        DestroyTableNum = _DestroyTableNum;
    }
    
    // add 销毁的桌子
    public void addDestroyTableNum(int _DestroyTableNum)
    {
        DestroyTableNum += _DestroyTableNum;
    }
    
    // get 收包数目
    public int getRecvPacketNum()
    {
        return RecvPacketNum;
    }
    
    // set 收包数目
    public void setRecvPacketNum(int _RecvPacketNum)
    {
        RecvPacketNum = _RecvPacketNum;
    }
    
    // add 收包数目
    public void addRecvPacketNum(int _RecvPacketNum)
    {
        RecvPacketNum += _RecvPacketNum;
    }
    
    // get 发包数目
    public int getSendPacketNum()
    {
        return SendPacketNum;
    }
    
    // set 发包数目
    public void setSendPacketNum(int _SendPacketNum)
    {
        SendPacketNum = _SendPacketNum;
    }
    
    // add 发包数目
    public void addSendPacketNum(int _SendPacketNum)
    {
        SendPacketNum += _SendPacketNum;
    }
    
    // get 收包流量
    public int getRecvSizeNum()
    {
        return RecvSizeNum;
    }
    
    // set 收包流量
    public void setRecvSizeNum(int _RecvSizeNum)
    {
        RecvSizeNum = _RecvSizeNum;
    }
    
    // add 收包流量
    public void addRecvSizeNum(int _RecvSizeNum)
    {
        RecvSizeNum += _RecvSizeNum;
    }
    
    // get 发包流量
    public int getSendSizeNum()
    {
        return SendSizeNum;
    }
    
    // set 发包流量
    public void setSendSizeNum(int _SendSizeNum)
    {
        SendSizeNum = _SendSizeNum;
    }
    
    // add 发包流量
    public void addSendSizeNum(int _SendSizeNum)
    {
        SendSizeNum += _SendSizeNum;
    }
    
    // get Top收包处理时间
    public int getProcessTime()
    {
        return ProcessTime;
    }
    
    // set Top收包处理时间
    public void setProcessTime(int _ProcessTime)
    {
        ProcessTime = _ProcessTime;
    }
    
    // add Top收包处理时间
    public void addProcessTime(int _ProcessTime)
    {
        ProcessTime += _ProcessTime;
    }
    
    
         
	// set 各个房间的桌子数目
    public void setRoomTableNum(int index, int _RoomTableNum)
    {
		if (index >= 3 || index < 0)
        {
            return;
        }
        RoomTableNum[index] += _RoomTableNum;
    }
	
    // add 各个房间的桌子数目
    public void addRoomTableNum(int index, int _RoomTableNum)
    {
        if (index >= 3 || index < 0)
        {
            return;
        }
        RoomTableNum[index] += _RoomTableNum;
    }
         
	// set 各个房间的玩家数目
    public void setRoomPlayerNum(int index, int _RoomPlayerNum)
    {
		if (index >= 3 || index < 0)
        {
            return;
        }
        RoomPlayerNum[index] += _RoomPlayerNum;
    }
	
    // add 各个房间的玩家数目
    public void addRoomPlayerNum(int index, int _RoomPlayerNum)
    {
        if (index >= 3 || index < 0)
        {
            return;
        }
        RoomPlayerNum[index] += _RoomPlayerNum;
    }
         
	// set 桌子人数的玩家分布
    public void setTablePlayerNum(int index, int _TablePlayerNum)
    {
		if (index >= 6 || index < 0)
        {
            return;
        }
        TablePlayerNum[index] += _TablePlayerNum;
    }
	
    // add 桌子人数的玩家分布
    public void addTablePlayerNum(int index, int _TablePlayerNum)
    {
        if (index >= 6 || index < 0)
        {
            return;
        }
        TablePlayerNum[index] += _TablePlayerNum;
    }
         
	// set 各个房间的观战玩家数目
    public void setRoomWatchingPlayerNum(int index, int _RoomWatchingPlayerNum)
    {
		if (index >= 3 || index < 0)
        {
            return;
        }
        RoomWatchingPlayerNum[index] += _RoomWatchingPlayerNum;
    }
	
    // add 各个房间的观战玩家数目
    public void addRoomWatchingPlayerNum(int index, int _RoomWatchingPlayerNum)
    {
        if (index >= 3 || index < 0)
        {
            return;
        }
        RoomWatchingPlayerNum[index] += _RoomWatchingPlayerNum;
    }
         
	// set 桌子各状态数目
    public void setTableStateNum(int index, int _TableStateNum)
    {
		if (index >= 11 || index < 0)
        {
            return;
        }
        TableStateNum[index] += _TableStateNum;
    }
	
    // add 桌子各状态数目
    public void addTableStateNum(int index, int _TableStateNum)
    {
        if (index >= 11 || index < 0)
        {
            return;
        }
        TableStateNum[index] += _TableStateNum;
    }
    
	
          
	// set Top收包数目
    public void setTopRecvPacketNum(int index, int _TopRecvPacketNum)
    {
		if (index >= 200 || index < 0)
        {
            return;
        }
        TopRecvPacketNum[index] += _TopRecvPacketNum;
    }
	       
    // add Top收包数目
    public void addTopRecvPacketNum(int index, int _TopRecvPacketNum)
    {
        if (index >= 200 || index < 0)
        {
            return;
        }
        TopRecvPacketNum[index] += _TopRecvPacketNum;
    }
          
	// set Top发包数目
    public void setTopSendPacketNum(int index, int _TopSendPacketNum)
    {
		if (index >= 200 || index < 0)
        {
            return;
        }
        TopSendPacketNum[index] += _TopSendPacketNum;
    }
	       
    // add Top发包数目
    public void addTopSendPacketNum(int index, int _TopSendPacketNum)
    {
        if (index >= 200 || index < 0)
        {
            return;
        }
        TopSendPacketNum[index] += _TopSendPacketNum;
    }
          
	// set Top收包流量
    public void setTopRecvSizeNum(int index, int _TopRecvSizeNum)
    {
		if (index >= 200 || index < 0)
        {
            return;
        }
        TopRecvSizeNum[index] += _TopRecvSizeNum;
    }
	       
    // add Top收包流量
    public void addTopRecvSizeNum(int index, int _TopRecvSizeNum)
    {
        if (index >= 200 || index < 0)
        {
            return;
        }
        TopRecvSizeNum[index] += _TopRecvSizeNum;
    }
          
	// set Top发包流量
    public void setTopSendSizeNum(int index, int _TopSendSizeNum)
    {
		if (index >= 200 || index < 0)
        {
            return;
        }
        TopSendSizeNum[index] += _TopSendSizeNum;
    }
	       
    // add Top发包流量
    public void addTopSendSizeNum(int index, int _TopSendSizeNum)
    {
        if (index >= 200 || index < 0)
        {
            return;
        }
        TopSendSizeNum[index] += _TopSendSizeNum;
    }
          
	// set Top收包处理时间
    public void setTopProcessTime(int index, int _TopProcessTime)
    {
		if (index >= 200 || index < 0)
        {
            return;
        }
        TopProcessTime[index] += _TopProcessTime;
    }
	       
    // add Top收包处理时间
    public void addTopProcessTime(int index, int _TopProcessTime)
    {
        if (index >= 200 || index < 0)
        {
            return;
        }
        TopProcessTime[index] += _TopProcessTime;
    }
    
	
    
    
    public void clear()
	{
		
		// 桌子数目
		TotalTableNum = 0;
		
		// 玩家庄家的桌子数目
		MasterTableNum = 0;
		
		// 系统庄家的桌子数目
		SystemTableNum = 0;
		
		// 活跃桌子数目
		ActiveTableNum = 0;
		
		// 隐藏的桌子数目
		HideTableNum = 0;
		
		// 桌子上的玩家数目
		TotalPlayerNum = 0;
		
		// 桌子上的观战玩家数目
		TotalWatchingPlayerNum = 0;
		
		// 请求分桌数目
		JoinNum = 0;
		
		// 快速请求分桌数目
		JoinQuickNum = 0;
		
		// 手动请求分桌数目
		JoinClickNum = 0;
		
		// 分桌失败数目
		JoinFailNum = 0;
		
		// 分桌多次失败的数目
		JoinMaxFailNum = 0;
		
		// 分桌无playerinfo失败的数目
		JoinNoInfoFailNum = 0;
		
		// 分桌不同设备失败的数目
		JoinDiffFailNum = 0;
		
		// 分桌无routine失败的数目
		JoinNoRoutineFailNum = 0;
		
		// 分桌失败的数目
		JoinChooseTableFailNum = 0;
		
		// 分座位失败的数目
		JoinChooseSeatFailNum = 0;
		
		// 分桌关服失败的数目
		JoinOffFailNum = 0;
		
		// 分桌校验失败的数目
		JoinTokenFailNum = 0;
		
		// 分桌金币失败的数目
		JoinCoinsFailNum = 0;
		
		// 分桌锁定失败的数目
		JoinLockFailNum = 0;
		
		// 分桌封禁失败的数目
		JoinForbiddenFailNum = 0;
		
		// 分桌关服失败的数目
		JoinCloseFailNum = 0;
		
		// 分桌vip失败的数目
		JoinVIPFailNum = 0;
		
		// 创建的桌子
		NewTableNum = 0;
		
		// 开局的桌子
		InitTableNum = 0;
		
		// 结算的桌子
		EndTableNum = 0;
		
		// 销毁的桌子
		DestroyTableNum = 0;
		
		// 收包数目
		RecvPacketNum = 0;
		
		// 发包数目
		SendPacketNum = 0;
		
		// 收包流量
		RecvSizeNum = 0;
		
		// 发包流量
		SendSizeNum = 0;
		
		// Top收包处理时间
		ProcessTime = 0;
		
		
		// 各个房间的桌子数目
		for (int i = 0; i < RoomTableNum.length; i++)
		{
			RoomTableNum[i] = 0;
		}
		
		// 各个房间的玩家数目
		for (int i = 0; i < RoomPlayerNum.length; i++)
		{
			RoomPlayerNum[i] = 0;
		}
		
		// 桌子人数的玩家分布
		for (int i = 0; i < TablePlayerNum.length; i++)
		{
			TablePlayerNum[i] = 0;
		}
		
		// 各个房间的观战玩家数目
		for (int i = 0; i < RoomWatchingPlayerNum.length; i++)
		{
			RoomWatchingPlayerNum[i] = 0;
		}
		
		// 桌子各状态数目
		for (int i = 0; i < TableStateNum.length; i++)
		{
			TableStateNum[i] = 0;
		}
		
		
		// Top收包数目
		for (int i = 0; i < TopRecvPacketNum.length; i++)
		{
			TopRecvPacketNum[i] = 0;
		}
		
		// Top发包数目
		for (int i = 0; i < TopSendPacketNum.length; i++)
		{
			TopSendPacketNum[i] = 0;
		}
		
		// Top收包流量
		for (int i = 0; i < TopRecvSizeNum.length; i++)
		{
			TopRecvSizeNum[i] = 0;
		}
		
		// Top发包流量
		for (int i = 0; i < TopSendSizeNum.length; i++)
		{
			TopSendSizeNum[i] = 0;
		}
		
		// Top收包处理时间
		for (int i = 0; i < TopProcessTime.length; i++)
		{
			TopProcessTime[i] = 0;
		}
		
		
	}

    public void printLog(String strFile)
	{
		File file = null;
		try
		{
			file = new File("log/");
			if (!file.exists())
			{
				file.mkdirs();
			}
			file = new File("log/" + strFile);
			if (!file.exists())
			{
				file.createNewFile();
			}
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return;
		}
		
		Date date = new Date();
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String time = format.format(date);

		
		// Top收包数目
		int[] uTopRecvPacketNumId = new int[5];
		int[] uTopRecvPacketNumVal = new int[5];
		sortArray(TopRecvPacketNum, uTopRecvPacketNumId, uTopRecvPacketNumVal, true);
		
		// Top发包数目
		int[] uTopSendPacketNumId = new int[5];
		int[] uTopSendPacketNumVal = new int[5];
		sortArray(TopSendPacketNum, uTopSendPacketNumId, uTopSendPacketNumVal, true);
		
		// Top收包流量
		int[] uTopRecvSizeNumId = new int[5];
		int[] uTopRecvSizeNumVal = new int[5];
		sortArray(TopRecvSizeNum, uTopRecvSizeNumId, uTopRecvSizeNumVal, true);
		
		// Top发包流量
		int[] uTopSendSizeNumId = new int[5];
		int[] uTopSendSizeNumVal = new int[5];
		sortArray(TopSendSizeNum, uTopSendSizeNumId, uTopSendSizeNumVal, true);
		
		// Top收包处理时间
		int[] uTopProcessTimeId = new int[5];
		int[] uTopProcessTimeVal = new int[5];
		sortArray(TopProcessTime, uTopProcessTimeId, uTopProcessTimeVal, true);
		
		
		
		String str = String.format("=============================%s=============================\n" +
			
			// 桌子数目
			"TotalTableNum\t%d\t桌子数目\n" +
			
			// 玩家庄家的桌子数目
			"MasterTableNum\t%d\t玩家庄家的桌子数目\n" +
			
			// 系统庄家的桌子数目
			"SystemTableNum\t%d\t系统庄家的桌子数目\n" +
			
			// 活跃桌子数目
			"ActiveTableNum\t%d\t活跃桌子数目\n" +
			
			// 隐藏的桌子数目
			"HideTableNum\t%d\t隐藏的桌子数目\n" +
			
			// 桌子上的玩家数目
			"TotalPlayerNum\t%d\t桌子上的玩家数目\n" +
			
			// 桌子上的观战玩家数目
			"TotalWatchingPlayerNum\t%d\t桌子上的观战玩家数目\n" +
			
			// 请求分桌数目
			"JoinNum\t%d\t请求分桌数目\n" +
			
			// 快速请求分桌数目
			"JoinQuickNum\t%d\t快速请求分桌数目\n" +
			
			// 手动请求分桌数目
			"JoinClickNum\t%d\t手动请求分桌数目\n" +
			
			// 分桌失败数目
			"JoinFailNum\t%d\t分桌失败数目\n" +
			
			// 分桌多次失败的数目
			"JoinMaxFailNum\t%d\t分桌多次失败的数目\n" +
			
			// 分桌无playerinfo失败的数目
			"JoinNoInfoFailNum\t%d\t分桌无playerinfo失败的数目\n" +
			
			// 分桌不同设备失败的数目
			"JoinDiffFailNum\t%d\t分桌不同设备失败的数目\n" +
			
			// 分桌无routine失败的数目
			"JoinNoRoutineFailNum\t%d\t分桌无routine失败的数目\n" +
			
			// 分桌失败的数目
			"JoinChooseTableFailNum\t%d\t分桌失败的数目\n" +
			
			// 分座位失败的数目
			"JoinChooseSeatFailNum\t%d\t分座位失败的数目\n" +
			
			// 分桌关服失败的数目
			"JoinOffFailNum\t%d\t分桌关服失败的数目\n" +
			
			// 分桌校验失败的数目
			"JoinTokenFailNum\t%d\t分桌校验失败的数目\n" +
			
			// 分桌金币失败的数目
			"JoinCoinsFailNum\t%d\t分桌金币失败的数目\n" +
			
			// 分桌锁定失败的数目
			"JoinLockFailNum\t%d\t分桌锁定失败的数目\n" +
			
			// 分桌封禁失败的数目
			"JoinForbiddenFailNum\t%d\t分桌封禁失败的数目\n" +
			
			// 分桌关服失败的数目
			"JoinCloseFailNum\t%d\t分桌关服失败的数目\n" +
			
			// 分桌vip失败的数目
			"JoinVIPFailNum\t%d\t分桌vip失败的数目\n" +
			
			// 创建的桌子
			"NewTableNum\t%d\t创建的桌子\n" +
			
			// 开局的桌子
			"InitTableNum\t%d\t开局的桌子\n" +
			
			// 结算的桌子
			"EndTableNum\t%d\t结算的桌子\n" +
			
			// 销毁的桌子
			"DestroyTableNum\t%d\t销毁的桌子\n" +
			
			// 收包数目
			"RecvPacketNum\t%d\t收包数目\n" +
			
			// 发包数目
			"SendPacketNum\t%d\t发包数目\n" +
			
			// 收包流量
			"RecvSizeNum\t%d\t收包流量\n" +
			
			// 发包流量
			"SendSizeNum\t%d\t发包流量\n" +
			
			// Top收包处理时间
			"ProcessTime\t%d\tTop收包处理时间\n" +
			
			
			
			// 各个房间的桌子数目 0
			"RoomTableNum0\t%d\t各个房间的桌子数目0\n" +
			
			// 各个房间的桌子数目 1
			"RoomTableNum1\t%d\t各个房间的桌子数目1\n" +
			
			// 各个房间的桌子数目 2
			"RoomTableNum2\t%d\t各个房间的桌子数目2\n" +
			
			
			
			// 各个房间的玩家数目 0
			"RoomPlayerNum0\t%d\t各个房间的玩家数目0\n" +
			
			// 各个房间的玩家数目 1
			"RoomPlayerNum1\t%d\t各个房间的玩家数目1\n" +
			
			// 各个房间的玩家数目 2
			"RoomPlayerNum2\t%d\t各个房间的玩家数目2\n" +
			
			
			
			// 桌子人数的玩家分布 0
			"TablePlayerNum0\t%d\t桌子人数的玩家分布0\n" +
			
			// 桌子人数的玩家分布 1
			"TablePlayerNum1\t%d\t桌子人数的玩家分布1\n" +
			
			// 桌子人数的玩家分布 2
			"TablePlayerNum2\t%d\t桌子人数的玩家分布2\n" +
			
			// 桌子人数的玩家分布 3
			"TablePlayerNum3\t%d\t桌子人数的玩家分布3\n" +
			
			// 桌子人数的玩家分布 4
			"TablePlayerNum4\t%d\t桌子人数的玩家分布4\n" +
			
			// 桌子人数的玩家分布 5
			"TablePlayerNum5\t%d\t桌子人数的玩家分布5\n" +
			
			
			
			// 各个房间的观战玩家数目 0
			"RoomWatchingPlayerNum0\t%d\t各个房间的观战玩家数目0\n" +
			
			// 各个房间的观战玩家数目 1
			"RoomWatchingPlayerNum1\t%d\t各个房间的观战玩家数目1\n" +
			
			// 各个房间的观战玩家数目 2
			"RoomWatchingPlayerNum2\t%d\t各个房间的观战玩家数目2\n" +
			
			
			
			// 桌子各状态数目 0
			"TableStateNum0\t%d\t桌子各状态数目0\n" +
			
			// 桌子各状态数目 1
			"TableStateNum1\t%d\t桌子各状态数目1\n" +
			
			// 桌子各状态数目 2
			"TableStateNum2\t%d\t桌子各状态数目2\n" +
			
			// 桌子各状态数目 3
			"TableStateNum3\t%d\t桌子各状态数目3\n" +
			
			// 桌子各状态数目 4
			"TableStateNum4\t%d\t桌子各状态数目4\n" +
			
			// 桌子各状态数目 5
			"TableStateNum5\t%d\t桌子各状态数目5\n" +
			
			// 桌子各状态数目 6
			"TableStateNum6\t%d\t桌子各状态数目6\n" +
			
			// 桌子各状态数目 7
			"TableStateNum7\t%d\t桌子各状态数目7\n" +
			
			// 桌子各状态数目 8
			"TableStateNum8\t%d\t桌子各状态数目8\n" +
			
			// 桌子各状态数目 9
			"TableStateNum9\t%d\t桌子各状态数目9\n" +
			
			// 桌子各状态数目 10
			"TableStateNum10\t%d\t桌子各状态数目10\n" +
			
			
			
			
			// Top收包数目 0
			"TopRecvPacketNumId0\t%d\tTop收包数目Id0\nTopRecvPacketNumVal0\t%d\tTop收包数目Val0\n" +
			
			// Top收包数目 1
			"TopRecvPacketNumId1\t%d\tTop收包数目Id1\nTopRecvPacketNumVal1\t%d\tTop收包数目Val1\n" +
			
			// Top收包数目 2
			"TopRecvPacketNumId2\t%d\tTop收包数目Id2\nTopRecvPacketNumVal2\t%d\tTop收包数目Val2\n" +
			
			// Top收包数目 3
			"TopRecvPacketNumId3\t%d\tTop收包数目Id3\nTopRecvPacketNumVal3\t%d\tTop收包数目Val3\n" +
			
			// Top收包数目 4
			"TopRecvPacketNumId4\t%d\tTop收包数目Id4\nTopRecvPacketNumVal4\t%d\tTop收包数目Val4\n" +
			
			
			
			// Top发包数目 0
			"TopSendPacketNumId0\t%d\tTop发包数目Id0\nTopSendPacketNumVal0\t%d\tTop发包数目Val0\n" +
			
			// Top发包数目 1
			"TopSendPacketNumId1\t%d\tTop发包数目Id1\nTopSendPacketNumVal1\t%d\tTop发包数目Val1\n" +
			
			// Top发包数目 2
			"TopSendPacketNumId2\t%d\tTop发包数目Id2\nTopSendPacketNumVal2\t%d\tTop发包数目Val2\n" +
			
			// Top发包数目 3
			"TopSendPacketNumId3\t%d\tTop发包数目Id3\nTopSendPacketNumVal3\t%d\tTop发包数目Val3\n" +
			
			// Top发包数目 4
			"TopSendPacketNumId4\t%d\tTop发包数目Id4\nTopSendPacketNumVal4\t%d\tTop发包数目Val4\n" +
			
			
			
			// Top收包流量 0
			"TopRecvSizeNumId0\t%d\tTop收包流量Id0\nTopRecvSizeNumVal0\t%d\tTop收包流量Val0\n" +
			
			// Top收包流量 1
			"TopRecvSizeNumId1\t%d\tTop收包流量Id1\nTopRecvSizeNumVal1\t%d\tTop收包流量Val1\n" +
			
			// Top收包流量 2
			"TopRecvSizeNumId2\t%d\tTop收包流量Id2\nTopRecvSizeNumVal2\t%d\tTop收包流量Val2\n" +
			
			// Top收包流量 3
			"TopRecvSizeNumId3\t%d\tTop收包流量Id3\nTopRecvSizeNumVal3\t%d\tTop收包流量Val3\n" +
			
			// Top收包流量 4
			"TopRecvSizeNumId4\t%d\tTop收包流量Id4\nTopRecvSizeNumVal4\t%d\tTop收包流量Val4\n" +
			
			
			
			// Top发包流量 0
			"TopSendSizeNumId0\t%d\tTop发包流量Id0\nTopSendSizeNumVal0\t%d\tTop发包流量Val0\n" +
			
			// Top发包流量 1
			"TopSendSizeNumId1\t%d\tTop发包流量Id1\nTopSendSizeNumVal1\t%d\tTop发包流量Val1\n" +
			
			// Top发包流量 2
			"TopSendSizeNumId2\t%d\tTop发包流量Id2\nTopSendSizeNumVal2\t%d\tTop发包流量Val2\n" +
			
			// Top发包流量 3
			"TopSendSizeNumId3\t%d\tTop发包流量Id3\nTopSendSizeNumVal3\t%d\tTop发包流量Val3\n" +
			
			// Top发包流量 4
			"TopSendSizeNumId4\t%d\tTop发包流量Id4\nTopSendSizeNumVal4\t%d\tTop发包流量Val4\n" +
			
			
			
			// Top收包处理时间 0
			"TopProcessTimeId0\t%d\tTop收包处理时间Id0\nTopProcessTimeVal0\t%d\tTop收包处理时间Val0\n" +
			
			// Top收包处理时间 1
			"TopProcessTimeId1\t%d\tTop收包处理时间Id1\nTopProcessTimeVal1\t%d\tTop收包处理时间Val1\n" +
			
			// Top收包处理时间 2
			"TopProcessTimeId2\t%d\tTop收包处理时间Id2\nTopProcessTimeVal2\t%d\tTop收包处理时间Val2\n" +
			
			// Top收包处理时间 3
			"TopProcessTimeId3\t%d\tTop收包处理时间Id3\nTopProcessTimeVal3\t%d\tTop收包处理时间Val3\n" +
			
			// Top收包处理时间 4
			"TopProcessTimeId4\t%d\tTop收包处理时间Id4\nTopProcessTimeVal4\t%d\tTop收包处理时间Val4\n" +
			
			
			
			"\n"
			
			, time
			
			// 桌子数目
			, TotalTableNum
			
			// 玩家庄家的桌子数目
			, MasterTableNum
			
			// 系统庄家的桌子数目
			, SystemTableNum
			
			// 活跃桌子数目
			, ActiveTableNum
			
			// 隐藏的桌子数目
			, HideTableNum
			
			// 桌子上的玩家数目
			, TotalPlayerNum
			
			// 桌子上的观战玩家数目
			, TotalWatchingPlayerNum
			
			// 请求分桌数目
			, JoinNum
			
			// 快速请求分桌数目
			, JoinQuickNum
			
			// 手动请求分桌数目
			, JoinClickNum
			
			// 分桌失败数目
			, JoinFailNum
			
			// 分桌多次失败的数目
			, JoinMaxFailNum
			
			// 分桌无playerinfo失败的数目
			, JoinNoInfoFailNum
			
			// 分桌不同设备失败的数目
			, JoinDiffFailNum
			
			// 分桌无routine失败的数目
			, JoinNoRoutineFailNum
			
			// 分桌失败的数目
			, JoinChooseTableFailNum
			
			// 分座位失败的数目
			, JoinChooseSeatFailNum
			
			// 分桌关服失败的数目
			, JoinOffFailNum
			
			// 分桌校验失败的数目
			, JoinTokenFailNum
			
			// 分桌金币失败的数目
			, JoinCoinsFailNum
			
			// 分桌锁定失败的数目
			, JoinLockFailNum
			
			// 分桌封禁失败的数目
			, JoinForbiddenFailNum
			
			// 分桌关服失败的数目
			, JoinCloseFailNum
			
			// 分桌vip失败的数目
			, JoinVIPFailNum
			
			// 创建的桌子
			, NewTableNum
			
			// 开局的桌子
			, InitTableNum
			
			// 结算的桌子
			, EndTableNum
			
			// 销毁的桌子
			, DestroyTableNum
			
			// 收包数目
			, RecvPacketNum
			
			// 发包数目
			, SendPacketNum
			
			// 收包流量
			, RecvSizeNum
			
			// 发包流量
			, SendSizeNum
			
			// Top收包处理时间
			, ProcessTime
			
			
			
			// 各个房间的桌子数目 0
			, RoomTableNum[0]
			
			// 各个房间的桌子数目 1
			, RoomTableNum[1]
			
			// 各个房间的桌子数目 2
			, RoomTableNum[2]
			
			
			
			// 各个房间的玩家数目 0
			, RoomPlayerNum[0]
			
			// 各个房间的玩家数目 1
			, RoomPlayerNum[1]
			
			// 各个房间的玩家数目 2
			, RoomPlayerNum[2]
			
			
			
			// 桌子人数的玩家分布 0
			, TablePlayerNum[0]
			
			// 桌子人数的玩家分布 1
			, TablePlayerNum[1]
			
			// 桌子人数的玩家分布 2
			, TablePlayerNum[2]
			
			// 桌子人数的玩家分布 3
			, TablePlayerNum[3]
			
			// 桌子人数的玩家分布 4
			, TablePlayerNum[4]
			
			// 桌子人数的玩家分布 5
			, TablePlayerNum[5]
			
			
			
			// 各个房间的观战玩家数目 0
			, RoomWatchingPlayerNum[0]
			
			// 各个房间的观战玩家数目 1
			, RoomWatchingPlayerNum[1]
			
			// 各个房间的观战玩家数目 2
			, RoomWatchingPlayerNum[2]
			
			
			
			// 桌子各状态数目 0
			, TableStateNum[0]
			
			// 桌子各状态数目 1
			, TableStateNum[1]
			
			// 桌子各状态数目 2
			, TableStateNum[2]
			
			// 桌子各状态数目 3
			, TableStateNum[3]
			
			// 桌子各状态数目 4
			, TableStateNum[4]
			
			// 桌子各状态数目 5
			, TableStateNum[5]
			
			// 桌子各状态数目 6
			, TableStateNum[6]
			
			// 桌子各状态数目 7
			, TableStateNum[7]
			
			// 桌子各状态数目 8
			, TableStateNum[8]
			
			// 桌子各状态数目 9
			, TableStateNum[9]
			
			// 桌子各状态数目 10
			, TableStateNum[10]
			
			
			
			
			// Top收包数目 0
			, uTopRecvPacketNumId[0], uTopRecvPacketNumVal[0]
			
			// Top收包数目 1
			, uTopRecvPacketNumId[1], uTopRecvPacketNumVal[1]
			
			// Top收包数目 2
			, uTopRecvPacketNumId[2], uTopRecvPacketNumVal[2]
			
			// Top收包数目 3
			, uTopRecvPacketNumId[3], uTopRecvPacketNumVal[3]
			
			// Top收包数目 4
			, uTopRecvPacketNumId[4], uTopRecvPacketNumVal[4]
			
			
			
			// Top发包数目 0
			, uTopSendPacketNumId[0], uTopSendPacketNumVal[0]
			
			// Top发包数目 1
			, uTopSendPacketNumId[1], uTopSendPacketNumVal[1]
			
			// Top发包数目 2
			, uTopSendPacketNumId[2], uTopSendPacketNumVal[2]
			
			// Top发包数目 3
			, uTopSendPacketNumId[3], uTopSendPacketNumVal[3]
			
			// Top发包数目 4
			, uTopSendPacketNumId[4], uTopSendPacketNumVal[4]
			
			
			
			// Top收包流量 0
			, uTopRecvSizeNumId[0], uTopRecvSizeNumVal[0]
			
			// Top收包流量 1
			, uTopRecvSizeNumId[1], uTopRecvSizeNumVal[1]
			
			// Top收包流量 2
			, uTopRecvSizeNumId[2], uTopRecvSizeNumVal[2]
			
			// Top收包流量 3
			, uTopRecvSizeNumId[3], uTopRecvSizeNumVal[3]
			
			// Top收包流量 4
			, uTopRecvSizeNumId[4], uTopRecvSizeNumVal[4]
			
			
			
			// Top发包流量 0
			, uTopSendSizeNumId[0], uTopSendSizeNumVal[0]
			
			// Top发包流量 1
			, uTopSendSizeNumId[1], uTopSendSizeNumVal[1]
			
			// Top发包流量 2
			, uTopSendSizeNumId[2], uTopSendSizeNumVal[2]
			
			// Top发包流量 3
			, uTopSendSizeNumId[3], uTopSendSizeNumVal[3]
			
			// Top发包流量 4
			, uTopSendSizeNumId[4], uTopSendSizeNumVal[4]
			
			
			
			// Top收包处理时间 0
			, uTopProcessTimeId[0], uTopProcessTimeVal[0]
			
			// Top收包处理时间 1
			, uTopProcessTimeId[1], uTopProcessTimeVal[1]
			
			// Top收包处理时间 2
			, uTopProcessTimeId[2], uTopProcessTimeVal[2]
			
			// Top收包处理时间 3
			, uTopProcessTimeId[3], uTopProcessTimeVal[3]
			
			// Top收包处理时间 4
			, uTopProcessTimeId[4], uTopProcessTimeVal[4]
			
			
			
			);
			
		clear();
		
		try
		{
			FileOutputStream out = new FileOutputStream(file, true);
			out.write(str.toString().getBytes("utf-8"));
			out.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return;
		}
		
	}
    
}

