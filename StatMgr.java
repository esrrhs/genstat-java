/* This file is generated by genstat. */
/* No manual modification is permitted. */

package test;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

  
// gameserver统计结构
class GameStatMgr
{
	private static GameStatMgr instance;
	
    
    // 房间数目
    private int RoomNum;
    
    // 玩家数目
    private int PlayerNum;
    
    
    // 房间 各状态数目
    private int[] RoomStateNum = new int[10];
    
    // 房间 各人数数目
    private int[] RoomSeatsNum = new int[10];
    
    
    // client端 Top收包数目
    private int[] TopRecvPacketNum = new int[200];
    
    // client端 Top发包数目
    private int[] TopSendPacketNum = new int[200];
    
    // client端 Top收包流量
    private int[] TopRecvSizeNum = new int[200];
    
    // client端 Top发包流量
    private int[] TopSendSizeNum = new int[200];
    
    // client端 Top收包处理时间
    private int[] TopProcessTime = new int[200];
        
    
    // Top房间人数
    private ConcurrentHashMap<Integer, Integer> TopRoomNum = new ConcurrentHashMap<Integer, Integer>();
        
	
	// gameserver统计结构
    public GameStatMgr()
	{
		Clear();
	}
	
	public static GameStatMgr instance()
	{
		if (instance == null)
		{
			synchronized (GameStatMgr.class)
			{
				if (instance == null)
				{
					instance = new GameStatMgr();
					return instance;
				}
			}
		}
		return instance;
	}
	
	public void SortArray(int[] src, int[] desId, int[] desVal, boolean isMax)
	{
		int srcSize = src.length;
		int desSize = desId.length;
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				int max = 0;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] > max)
					{
						desId[i] = j;
						desVal[i] = src[j];
						max = src[j];
					}
				}
				src[desId[i]] = 0;
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				int min = 0xFFFFFFFF;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] < min && src[j] > 0)
					{
						desId[i] = j;
						desVal[i] = src[j];
						min = src[j];
					}
				}
				src[desId[i]] = 0xFFFFFFFF;
			}
		}
	}

	public void SortHashMap(ConcurrentHashMap<Integer, Integer> map, int[] desId, int[] desVal, boolean isMax)
	{
		int desSize = desId.length;
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				int max = 0;
				for (Map.Entry<Integer, Integer> e : map.entrySet())
				{
					if (e.getValue() > max)
					{
						desId[i] = e.getKey();
						desVal[i] = e.getValue();
						max = e.getValue();
					}
				}
				if (map.containsKey(desId[i]))
				{
					map.put(desId[i], 0);
				}
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				int min = 0xFFFFFFFF;
				for (Map.Entry<Integer, Integer> e : map.entrySet())
				{
					if (e.getValue() < min && e.getValue() > 0)
					{
						desId[i] = e.getKey();
						desVal[i] = e.getValue();
						min = e.getValue();
					}
				}
				if (map.containsKey(desId[i]))
				{
					map.put(desId[i], 0);
				}
			}
		}
	}
		
    
    // Get 房间数目
    public int GetRoomNum()
    {
        return RoomNum;
    }
    
    // Set 房间数目
    public void SetRoomNum(int _RoomNum)
    {
        RoomNum = _RoomNum;
    }
    
    // Add 房间数目
    public void AddRoomNum(int _RoomNum)
    {
        RoomNum += _RoomNum;
    }
    
    // Get 玩家数目
    public int GetPlayerNum()
    {
        return PlayerNum;
    }
    
    // Set 玩家数目
    public void SetPlayerNum(int _PlayerNum)
    {
        PlayerNum = _PlayerNum;
    }
    
    // Add 玩家数目
    public void AddPlayerNum(int _PlayerNum)
    {
        PlayerNum += _PlayerNum;
    }
    
    
         
	// Set 房间 各状态数目
    public void SetRoomStateNum(int index, int _RoomStateNum)
    {
		if (index >= 10)
        {
            return;
        }
        RoomStateNum[index] += _RoomStateNum;
    }
	
    // Add 房间 各状态数目
    public void AddRoomStateNum(int index, int _RoomStateNum)
    {
        if (index >= 10)
        {
            return;
        }
        RoomStateNum[index] += _RoomStateNum;
    }
         
	// Set 房间 各人数数目
    public void SetRoomSeatsNum(int index, int _RoomSeatsNum)
    {
		if (index >= 10)
        {
            return;
        }
        RoomSeatsNum[index] += _RoomSeatsNum;
    }
	
    // Add 房间 各人数数目
    public void AddRoomSeatsNum(int index, int _RoomSeatsNum)
    {
        if (index >= 10)
        {
            return;
        }
        RoomSeatsNum[index] += _RoomSeatsNum;
    }
    
	
          
	// Set client端 Top收包数目
    public void SetTopRecvPacketNum(int index, int _TopRecvPacketNum)
    {
		if (index >= 200)
        {
            return;
        }
        TopRecvPacketNum[index] += _TopRecvPacketNum;
    }
	       
    // Add client端 Top收包数目
    public void AddTopRecvPacketNum(int index, int _TopRecvPacketNum)
    {
        if (index >= 200)
        {
            return;
        }
        TopRecvPacketNum[index] += _TopRecvPacketNum;
    }
          
	// Set client端 Top发包数目
    public void SetTopSendPacketNum(int index, int _TopSendPacketNum)
    {
		if (index >= 200)
        {
            return;
        }
        TopSendPacketNum[index] += _TopSendPacketNum;
    }
	       
    // Add client端 Top发包数目
    public void AddTopSendPacketNum(int index, int _TopSendPacketNum)
    {
        if (index >= 200)
        {
            return;
        }
        TopSendPacketNum[index] += _TopSendPacketNum;
    }
          
	// Set client端 Top收包流量
    public void SetTopRecvSizeNum(int index, int _TopRecvSizeNum)
    {
		if (index >= 200)
        {
            return;
        }
        TopRecvSizeNum[index] += _TopRecvSizeNum;
    }
	       
    // Add client端 Top收包流量
    public void AddTopRecvSizeNum(int index, int _TopRecvSizeNum)
    {
        if (index >= 200)
        {
            return;
        }
        TopRecvSizeNum[index] += _TopRecvSizeNum;
    }
          
	// Set client端 Top发包流量
    public void SetTopSendSizeNum(int index, int _TopSendSizeNum)
    {
		if (index >= 200)
        {
            return;
        }
        TopSendSizeNum[index] += _TopSendSizeNum;
    }
	       
    // Add client端 Top发包流量
    public void AddTopSendSizeNum(int index, int _TopSendSizeNum)
    {
        if (index >= 200)
        {
            return;
        }
        TopSendSizeNum[index] += _TopSendSizeNum;
    }
          
	// Set client端 Top收包处理时间
    public void SetTopProcessTime(int index, int _TopProcessTime)
    {
		if (index >= 200)
        {
            return;
        }
        TopProcessTime[index] += _TopProcessTime;
    }
	       
    // Add client端 Top收包处理时间
    public void AddTopProcessTime(int index, int _TopProcessTime)
    {
        if (index >= 200)
        {
            return;
        }
        TopProcessTime[index] += _TopProcessTime;
    }
    
	
         
	// Set Top房间人数
    public void SetTopRoomNum(int index, int _TopRoomNum)
    {
		TopRoomNum.put(index, _TopRoomNum);
    }
	        
    // Add Top房间人数
    public void AddTopRoomNum(int index, int _TopRoomNum)
    {
        if (TopRoomNum.containsKey(index))
        {
            int val = TopRoomNum.get(index);
            val += _TopRoomNum;
            TopRoomNum.put(index, val);
        }
        else
        {
            TopRoomNum.put(index, _TopRoomNum);
        }
    }
	
    // Add Top房间人数
    public void AddTopRoomNum(int index)
    {
        if (TopRoomNum.containsKey(index))
        {
            int val = TopRoomNum.get(index);
            val += 1;
            TopRoomNum.put(index, val);
        }
        else
        {
            TopRoomNum.put(index, 1);
        }
    }
    
    
    public void Clear()
	{
		
		// 房间数目
		RoomNum = 0;
		
		// 玩家数目
		PlayerNum = 0;
		
		
		// 房间 各状态数目
		for (int i = 0; i < RoomStateNum.length; i++)
		{
			RoomStateNum[i] = 0;
		}
		
		// 房间 各人数数目
		for (int i = 0; i < RoomSeatsNum.length; i++)
		{
			RoomSeatsNum[i] = 0;
		}
		
		
		// client端 Top收包数目
		for (int i = 0; i < TopRecvPacketNum.length; i++)
		{
			TopRecvPacketNum[i] = 0;
		}
		
		// client端 Top发包数目
		for (int i = 0; i < TopSendPacketNum.length; i++)
		{
			TopSendPacketNum[i] = 0;
		}
		
		// client端 Top收包流量
		for (int i = 0; i < TopRecvSizeNum.length; i++)
		{
			TopRecvSizeNum[i] = 0;
		}
		
		// client端 Top发包流量
		for (int i = 0; i < TopSendSizeNum.length; i++)
		{
			TopSendSizeNum[i] = 0;
		}
		
		// client端 Top收包处理时间
		for (int i = 0; i < TopProcessTime.length; i++)
		{
			TopProcessTime[i] = 0;
		}
		
		
		// Top房间人数
		TopRoomNum.clear();
		
	}

    public void PrintLog(String strFile)
	{
		File file = null;
		try
		{
			file = new File("log/");
			if (!file.exists())
			{
				file.mkdirs();
			}
			file = new File("log/" + strFile);
			if (!file.exists())
			{
				file.createNewFile();
			}
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return;
		}
		
		Date date = new Date();
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String time = format.format(date);

		
		// client端 Top收包数目
		int[] uTopRecvPacketNumId = new int[5];
		int[] uTopRecvPacketNumVal = new int[5];
		SortArray(TopRecvPacketNum, uTopRecvPacketNumId, uTopRecvPacketNumVal, true);
		
		// client端 Top发包数目
		int[] uTopSendPacketNumId = new int[5];
		int[] uTopSendPacketNumVal = new int[5];
		SortArray(TopSendPacketNum, uTopSendPacketNumId, uTopSendPacketNumVal, true);
		
		// client端 Top收包流量
		int[] uTopRecvSizeNumId = new int[5];
		int[] uTopRecvSizeNumVal = new int[5];
		SortArray(TopRecvSizeNum, uTopRecvSizeNumId, uTopRecvSizeNumVal, true);
		
		// client端 Top发包流量
		int[] uTopSendSizeNumId = new int[5];
		int[] uTopSendSizeNumVal = new int[5];
		SortArray(TopSendSizeNum, uTopSendSizeNumId, uTopSendSizeNumVal, true);
		
		// client端 Top收包处理时间
		int[] uTopProcessTimeId = new int[5];
		int[] uTopProcessTimeVal = new int[5];
		SortArray(TopProcessTime, uTopProcessTimeId, uTopProcessTimeVal, true);
		
		
		// Top房间人数
		int[] uTopRoomNumId = new int[5];
		int[] uTopRoomNumVal = new int[5];
		SortHashMap(TopRoomNum, uTopRoomNumId, uTopRoomNumVal, true);
		
		
		String str = String.format("=============================%s=============================\n" +
			
			// 房间数目
			"RoomNum\t%d\t房间数目\n" +
			
			// 玩家数目
			"PlayerNum\t%d\t玩家数目\n" +
			
			
			
			// 房间 各状态数目 0
			"RoomStateNum0\t%d\t房间 各状态数目0\n" +
			
			// 房间 各状态数目 1
			"RoomStateNum1\t%d\t房间 各状态数目1\n" +
			
			// 房间 各状态数目 2
			"RoomStateNum2\t%d\t房间 各状态数目2\n" +
			
			// 房间 各状态数目 3
			"RoomStateNum3\t%d\t房间 各状态数目3\n" +
			
			// 房间 各状态数目 4
			"RoomStateNum4\t%d\t房间 各状态数目4\n" +
			
			// 房间 各状态数目 5
			"RoomStateNum5\t%d\t房间 各状态数目5\n" +
			
			// 房间 各状态数目 6
			"RoomStateNum6\t%d\t房间 各状态数目6\n" +
			
			// 房间 各状态数目 7
			"RoomStateNum7\t%d\t房间 各状态数目7\n" +
			
			// 房间 各状态数目 8
			"RoomStateNum8\t%d\t房间 各状态数目8\n" +
			
			// 房间 各状态数目 9
			"RoomStateNum9\t%d\t房间 各状态数目9\n" +
			
			
			
			// 房间 各人数数目 0
			"RoomSeatsNum0\t%d\t房间 各人数数目0\n" +
			
			// 房间 各人数数目 1
			"RoomSeatsNum1\t%d\t房间 各人数数目1\n" +
			
			// 房间 各人数数目 2
			"RoomSeatsNum2\t%d\t房间 各人数数目2\n" +
			
			// 房间 各人数数目 3
			"RoomSeatsNum3\t%d\t房间 各人数数目3\n" +
			
			// 房间 各人数数目 4
			"RoomSeatsNum4\t%d\t房间 各人数数目4\n" +
			
			// 房间 各人数数目 5
			"RoomSeatsNum5\t%d\t房间 各人数数目5\n" +
			
			// 房间 各人数数目 6
			"RoomSeatsNum6\t%d\t房间 各人数数目6\n" +
			
			// 房间 各人数数目 7
			"RoomSeatsNum7\t%d\t房间 各人数数目7\n" +
			
			// 房间 各人数数目 8
			"RoomSeatsNum8\t%d\t房间 各人数数目8\n" +
			
			// 房间 各人数数目 9
			"RoomSeatsNum9\t%d\t房间 各人数数目9\n" +
			
			
			
			
			// client端 Top收包数目 0
			"TopRecvPacketNumId0\t%d\tclient端 Top收包数目Id0\nTopRecvPacketNumVal0\t%d\tclient端 Top收包数目Val0\n" +
			
			// client端 Top收包数目 1
			"TopRecvPacketNumId1\t%d\tclient端 Top收包数目Id1\nTopRecvPacketNumVal1\t%d\tclient端 Top收包数目Val1\n" +
			
			// client端 Top收包数目 2
			"TopRecvPacketNumId2\t%d\tclient端 Top收包数目Id2\nTopRecvPacketNumVal2\t%d\tclient端 Top收包数目Val2\n" +
			
			// client端 Top收包数目 3
			"TopRecvPacketNumId3\t%d\tclient端 Top收包数目Id3\nTopRecvPacketNumVal3\t%d\tclient端 Top收包数目Val3\n" +
			
			// client端 Top收包数目 4
			"TopRecvPacketNumId4\t%d\tclient端 Top收包数目Id4\nTopRecvPacketNumVal4\t%d\tclient端 Top收包数目Val4\n" +
			
			
			
			// client端 Top发包数目 0
			"TopSendPacketNumId0\t%d\tclient端 Top发包数目Id0\nTopSendPacketNumVal0\t%d\tclient端 Top发包数目Val0\n" +
			
			// client端 Top发包数目 1
			"TopSendPacketNumId1\t%d\tclient端 Top发包数目Id1\nTopSendPacketNumVal1\t%d\tclient端 Top发包数目Val1\n" +
			
			// client端 Top发包数目 2
			"TopSendPacketNumId2\t%d\tclient端 Top发包数目Id2\nTopSendPacketNumVal2\t%d\tclient端 Top发包数目Val2\n" +
			
			// client端 Top发包数目 3
			"TopSendPacketNumId3\t%d\tclient端 Top发包数目Id3\nTopSendPacketNumVal3\t%d\tclient端 Top发包数目Val3\n" +
			
			// client端 Top发包数目 4
			"TopSendPacketNumId4\t%d\tclient端 Top发包数目Id4\nTopSendPacketNumVal4\t%d\tclient端 Top发包数目Val4\n" +
			
			
			
			// client端 Top收包流量 0
			"TopRecvSizeNumId0\t%d\tclient端 Top收包流量Id0\nTopRecvSizeNumVal0\t%d\tclient端 Top收包流量Val0\n" +
			
			// client端 Top收包流量 1
			"TopRecvSizeNumId1\t%d\tclient端 Top收包流量Id1\nTopRecvSizeNumVal1\t%d\tclient端 Top收包流量Val1\n" +
			
			// client端 Top收包流量 2
			"TopRecvSizeNumId2\t%d\tclient端 Top收包流量Id2\nTopRecvSizeNumVal2\t%d\tclient端 Top收包流量Val2\n" +
			
			// client端 Top收包流量 3
			"TopRecvSizeNumId3\t%d\tclient端 Top收包流量Id3\nTopRecvSizeNumVal3\t%d\tclient端 Top收包流量Val3\n" +
			
			// client端 Top收包流量 4
			"TopRecvSizeNumId4\t%d\tclient端 Top收包流量Id4\nTopRecvSizeNumVal4\t%d\tclient端 Top收包流量Val4\n" +
			
			
			
			// client端 Top发包流量 0
			"TopSendSizeNumId0\t%d\tclient端 Top发包流量Id0\nTopSendSizeNumVal0\t%d\tclient端 Top发包流量Val0\n" +
			
			// client端 Top发包流量 1
			"TopSendSizeNumId1\t%d\tclient端 Top发包流量Id1\nTopSendSizeNumVal1\t%d\tclient端 Top发包流量Val1\n" +
			
			// client端 Top发包流量 2
			"TopSendSizeNumId2\t%d\tclient端 Top发包流量Id2\nTopSendSizeNumVal2\t%d\tclient端 Top发包流量Val2\n" +
			
			// client端 Top发包流量 3
			"TopSendSizeNumId3\t%d\tclient端 Top发包流量Id3\nTopSendSizeNumVal3\t%d\tclient端 Top发包流量Val3\n" +
			
			// client端 Top发包流量 4
			"TopSendSizeNumId4\t%d\tclient端 Top发包流量Id4\nTopSendSizeNumVal4\t%d\tclient端 Top发包流量Val4\n" +
			
			
			
			// client端 Top收包处理时间 0
			"TopProcessTimeId0\t%d\tclient端 Top收包处理时间Id0\nTopProcessTimeVal0\t%d\tclient端 Top收包处理时间Val0\n" +
			
			// client端 Top收包处理时间 1
			"TopProcessTimeId1\t%d\tclient端 Top收包处理时间Id1\nTopProcessTimeVal1\t%d\tclient端 Top收包处理时间Val1\n" +
			
			// client端 Top收包处理时间 2
			"TopProcessTimeId2\t%d\tclient端 Top收包处理时间Id2\nTopProcessTimeVal2\t%d\tclient端 Top收包处理时间Val2\n" +
			
			// client端 Top收包处理时间 3
			"TopProcessTimeId3\t%d\tclient端 Top收包处理时间Id3\nTopProcessTimeVal3\t%d\tclient端 Top收包处理时间Val3\n" +
			
			// client端 Top收包处理时间 4
			"TopProcessTimeId4\t%d\tclient端 Top收包处理时间Id4\nTopProcessTimeVal4\t%d\tclient端 Top收包处理时间Val4\n" +
			
			
			
			
			// Top房间人数 0
			"TopRoomNumId0\t%d\tTop房间人数Id0\nTopRoomNumVal0\t%d\tTop房间人数Val0\n" +
			
			// Top房间人数 1
			"TopRoomNumId1\t%d\tTop房间人数Id1\nTopRoomNumVal1\t%d\tTop房间人数Val1\n" +
			
			// Top房间人数 2
			"TopRoomNumId2\t%d\tTop房间人数Id2\nTopRoomNumVal2\t%d\tTop房间人数Val2\n" +
			
			// Top房间人数 3
			"TopRoomNumId3\t%d\tTop房间人数Id3\nTopRoomNumVal3\t%d\tTop房间人数Val3\n" +
			
			// Top房间人数 4
			"TopRoomNumId4\t%d\tTop房间人数Id4\nTopRoomNumVal4\t%d\tTop房间人数Val4\n" +
			
			
			"\n"
			
			, time
			
			// 房间数目
			, RoomNum
			
			// 玩家数目
			, PlayerNum
			
			
			
			// 房间 各状态数目 0
			, RoomStateNum[0]
			
			// 房间 各状态数目 1
			, RoomStateNum[1]
			
			// 房间 各状态数目 2
			, RoomStateNum[2]
			
			// 房间 各状态数目 3
			, RoomStateNum[3]
			
			// 房间 各状态数目 4
			, RoomStateNum[4]
			
			// 房间 各状态数目 5
			, RoomStateNum[5]
			
			// 房间 各状态数目 6
			, RoomStateNum[6]
			
			// 房间 各状态数目 7
			, RoomStateNum[7]
			
			// 房间 各状态数目 8
			, RoomStateNum[8]
			
			// 房间 各状态数目 9
			, RoomStateNum[9]
			
			
			
			// 房间 各人数数目 0
			, RoomSeatsNum[0]
			
			// 房间 各人数数目 1
			, RoomSeatsNum[1]
			
			// 房间 各人数数目 2
			, RoomSeatsNum[2]
			
			// 房间 各人数数目 3
			, RoomSeatsNum[3]
			
			// 房间 各人数数目 4
			, RoomSeatsNum[4]
			
			// 房间 各人数数目 5
			, RoomSeatsNum[5]
			
			// 房间 各人数数目 6
			, RoomSeatsNum[6]
			
			// 房间 各人数数目 7
			, RoomSeatsNum[7]
			
			// 房间 各人数数目 8
			, RoomSeatsNum[8]
			
			// 房间 各人数数目 9
			, RoomSeatsNum[9]
			
			
			
			
			// client端 Top收包数目 0
			, uTopRecvPacketNumId[0], uTopRecvPacketNumVal[0]
			
			// client端 Top收包数目 1
			, uTopRecvPacketNumId[1], uTopRecvPacketNumVal[1]
			
			// client端 Top收包数目 2
			, uTopRecvPacketNumId[2], uTopRecvPacketNumVal[2]
			
			// client端 Top收包数目 3
			, uTopRecvPacketNumId[3], uTopRecvPacketNumVal[3]
			
			// client端 Top收包数目 4
			, uTopRecvPacketNumId[4], uTopRecvPacketNumVal[4]
			
			
			
			// client端 Top发包数目 0
			, uTopSendPacketNumId[0], uTopSendPacketNumVal[0]
			
			// client端 Top发包数目 1
			, uTopSendPacketNumId[1], uTopSendPacketNumVal[1]
			
			// client端 Top发包数目 2
			, uTopSendPacketNumId[2], uTopSendPacketNumVal[2]
			
			// client端 Top发包数目 3
			, uTopSendPacketNumId[3], uTopSendPacketNumVal[3]
			
			// client端 Top发包数目 4
			, uTopSendPacketNumId[4], uTopSendPacketNumVal[4]
			
			
			
			// client端 Top收包流量 0
			, uTopRecvSizeNumId[0], uTopRecvSizeNumVal[0]
			
			// client端 Top收包流量 1
			, uTopRecvSizeNumId[1], uTopRecvSizeNumVal[1]
			
			// client端 Top收包流量 2
			, uTopRecvSizeNumId[2], uTopRecvSizeNumVal[2]
			
			// client端 Top收包流量 3
			, uTopRecvSizeNumId[3], uTopRecvSizeNumVal[3]
			
			// client端 Top收包流量 4
			, uTopRecvSizeNumId[4], uTopRecvSizeNumVal[4]
			
			
			
			// client端 Top发包流量 0
			, uTopSendSizeNumId[0], uTopSendSizeNumVal[0]
			
			// client端 Top发包流量 1
			, uTopSendSizeNumId[1], uTopSendSizeNumVal[1]
			
			// client端 Top发包流量 2
			, uTopSendSizeNumId[2], uTopSendSizeNumVal[2]
			
			// client端 Top发包流量 3
			, uTopSendSizeNumId[3], uTopSendSizeNumVal[3]
			
			// client端 Top发包流量 4
			, uTopSendSizeNumId[4], uTopSendSizeNumVal[4]
			
			
			
			// client端 Top收包处理时间 0
			, uTopProcessTimeId[0], uTopProcessTimeVal[0]
			
			// client端 Top收包处理时间 1
			, uTopProcessTimeId[1], uTopProcessTimeVal[1]
			
			// client端 Top收包处理时间 2
			, uTopProcessTimeId[2], uTopProcessTimeVal[2]
			
			// client端 Top收包处理时间 3
			, uTopProcessTimeId[3], uTopProcessTimeVal[3]
			
			// client端 Top收包处理时间 4
			, uTopProcessTimeId[4], uTopProcessTimeVal[4]
			
			
			
			
			// Top房间人数 0
			, uTopRoomNumId[0], uTopRoomNumVal[0]
			
			// Top房间人数 1
			, uTopRoomNumId[1], uTopRoomNumVal[1]
			
			// Top房间人数 2
			, uTopRoomNumId[2], uTopRoomNumVal[2]
			
			// Top房间人数 3
			, uTopRoomNumId[3], uTopRoomNumVal[3]
			
			// Top房间人数 4
			, uTopRoomNumId[4], uTopRoomNumVal[4]
			
			
			);
			
		Clear();
		
		try
		{
			FileOutputStream out = new FileOutputStream(file, true);
			out.write(str.toString().getBytes("utf-8"));
			out.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return;
		}
		
	}
    
}

